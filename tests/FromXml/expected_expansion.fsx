
#if INTERACTIVE
#load @"../../templates/FromXml/FromXml_Base.fsx"
#load @"../../templates/FromXml/FromXml_Expander.fsx"
#load @"source_types.fsx"
#endif

(*
 * This file was auto-generated by the TypeExpansion type provider
 *
 * The contents of this file are likely to be overwritten at any time while
 * Visual Studio or F# Interactive is open, or while a build is in progress.
 *
 * Please do not make important changes to this file.
 *)

namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module Node_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type Node with
            static member FromXmlNode (xml : System.Xml.XmlNode) : Node =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'Node' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocElement doc "Node" Node.FromXmlNode
            static member FromXmlDoc xml = thingFromStringElement xml "Node" Node.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module NodeOpt_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type NodeOpt with
            static member FromXmlNode (xml : System.Xml.XmlNode) : NodeOpt =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'NodeOpt' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocElement doc "Node_Opt" NodeOpt.FromXmlNode
            static member FromXmlDoc xml = thingFromStringElement xml "Node_Opt" NodeOpt.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module NodeColl_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type NodeColl with
            static member FromXmlNode (xml : System.Xml.XmlNode) : NodeColl =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'NodeColl' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocElement doc "Node_Coll" NodeColl.FromXmlNode
            static member FromXmlDoc xml = thingFromStringElement xml "Node_Coll" NodeColl.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module NodeOptColl_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type NodeOptColl with
            static member FromXmlNode (xml : System.Xml.XmlNode) : NodeOptColl =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'NodeOptColl' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocElement doc "Node_Opt_Coll" NodeOptColl.FromXmlNode
            static member FromXmlDoc xml = thingFromStringElement xml "Node_Opt_Coll" NodeOptColl.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module Path_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type Path with
            static member FromXmlNode (xml : System.Xml.XmlNode) : Path =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'Path' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocXPath doc "xpath/path" Path.FromXmlNode
            static member FromXmlDoc xml = thingFromStringXPath xml "xpath/path" Path.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module PathOpt_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type PathOpt with
            static member FromXmlNode (xml : System.Xml.XmlNode) : PathOpt =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'PathOpt' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocXPath doc "xpath/path_opt" PathOpt.FromXmlNode
            static member FromXmlDoc xml = thingFromStringXPath xml "xpath/path_opt" PathOpt.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module PathColl_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type PathColl with
            static member FromXmlNode (xml : System.Xml.XmlNode) : PathColl =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'PathColl' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocXPath doc "xpath/path_coll" PathColl.FromXmlNode
            static member FromXmlDoc xml = thingFromStringXPath xml "xpath/path_coll" PathColl.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module PathOptColl_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type PathOptColl with
            static member FromXmlNode (xml : System.Xml.XmlNode) : PathOptColl =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'PathOptColl' value from it"
                {
                    ``Field`` = (exactlyOne "tags or attributes" getEitherValues xml "Field" getInnerText);
                }

            static member FromXmlDoc doc = thingFromDocXPath doc "xpath/path_opt_coll" PathOptColl.FromXmlNode
            static member FromXmlDoc xml = thingFromStringXPath xml "xpath/path_opt_coll" PathOptColl.FromXmlNode


namespace Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests
    [<AutoOpen>]
    module TestFields_FromXml_Extensions =

        open Amazingant.FSharp.TypeExpansion.Templates.FromXml

        type TestFields with
            static member FromXmlNode (xml : System.Xml.XmlNode) : TestFields =
                if isNull xml then failwithf "Given a null XmlNode and asked to parse a 'TestFields' value from it"
                {
                    ``SimpleString`` = (exactlyOne "tags or attributes" getEitherValues xml "SimpleString" getInnerText);
                    ``MaybeString`` = (maybeOne getEitherValues xml "MaybeString" getInnerText);
                    ``StringList`` = (getList getEitherValues xml "StringList" getInnerText);
                    ``StringArray`` = (getArray getEitherValues xml "StringArray" getInnerText);
                    ``StringSeq`` = (getSeq getEitherValues xml "StringSeq" getInnerText);
                    ``MaybeStringList`` = (getMaybeList getEitherValues xml "MaybeStringList" getInnerText);
                    ``MaybeStringArray`` = (getMaybeArray getEitherValues xml "MaybeStringArray" getInnerText);
                    ``MaybeStringSeq`` = (getMaybeSeq getEitherValues xml "MaybeStringSeq" getInnerText);
                    ``SimpleField`` = (exactlyOne "tags or attributes" getEitherValues xml "SimpleField" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeField`` = (maybeOne getEitherValues xml "MaybeField" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``FieldList`` = (getList getEitherValues xml "FieldList" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``FieldArray`` = (getArray getEitherValues xml "FieldArray" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``FieldSeq`` = (getSeq getEitherValues xml "FieldSeq" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeFieldList`` = (getMaybeList getEitherValues xml "MaybeFieldList" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeFieldArray`` = (getMaybeArray getEitherValues xml "MaybeFieldArray" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeFieldSeq`` = (getMaybeSeq getEitherValues xml "MaybeFieldSeq" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``SimpleXPathString`` = (exactlyOne "XPath" getXPathValues xml "string" getInnerText);
                    ``MaybeXPathString`` = (maybeOne getXPathValues xml "string_opt" getInnerText);
                    ``XPathStringList`` = (getList getXPathValues xml "string_coll" getInnerText);
                    ``XPathStringArray`` = (getArray getXPathValues xml "string_coll" getInnerText);
                    ``XPathStringSeq`` = (getSeq getXPathValues xml "string_coll" getInnerText);
                    ``MaybeXPathStringList`` = (getMaybeList getXPathValues xml "string_opt_coll" getInnerText);
                    ``MaybeXPathStringArray`` = (getMaybeArray getXPathValues xml "string_opt_coll" getInnerText);
                    ``MaybeXPathStringSeq`` = (getMaybeSeq getXPathValues xml "string_opt_coll" getInnerText);
                    ``SimpleXPathField`` = (exactlyOne "XPath" getXPathValues xml "int" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeXPathField`` = (maybeOne getXPathValues xml "int_opt" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``XPathFieldList`` = (getList getXPathValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``XPathFieldArray`` = (getArray getXPathValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``XPathFieldSeq`` = (getSeq getXPathValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeXPathFieldList`` = (getMaybeList getXPathValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeXPathFieldArray`` = (getMaybeArray getXPathValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeXPathFieldSeq`` = (getMaybeSeq getXPathValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``SimpleNodeString`` = (exactlyOne "tags" getTagValues xml "string" getInnerText);
                    ``MaybeNodeString`` = (maybeOne getTagValues xml "string_opt" getInnerText);
                    ``NodeStringList`` = (getList getTagValues xml "string_coll" getInnerText);
                    ``NodeStringArray`` = (getArray getTagValues xml "string_coll" getInnerText);
                    ``NodeStringSeq`` = (getSeq getTagValues xml "string_coll" getInnerText);
                    ``MaybeNodeStringList`` = (getMaybeList getTagValues xml "string_opt_coll" getInnerText);
                    ``MaybeNodeStringArray`` = (getMaybeArray getTagValues xml "string_opt_coll" getInnerText);
                    ``MaybeNodeStringSeq`` = (getMaybeSeq getTagValues xml "string_opt_coll" getInnerText);
                    ``SimpleNodeField`` = (exactlyOne "tags" getTagValues xml "int" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeNodeField`` = (maybeOne getTagValues xml "int_opt" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``NodeFieldList`` = (getList getTagValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``NodeFieldArray`` = (getArray getTagValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``NodeFieldSeq`` = (getSeq getTagValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeNodeFieldList`` = (getMaybeList getTagValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeNodeFieldArray`` = (getMaybeArray getTagValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeNodeFieldSeq`` = (getMaybeSeq getTagValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``SimpleAttrString`` = (exactlyOne "attributes" getAttrValues xml "string" getInnerText);
                    ``MaybeAttrString`` = (maybeOne getAttrValues xml "string_opt" getInnerText);
                    ``AttrStringList`` = (getList getAttrValues xml "string_coll" getInnerText);
                    ``AttrStringArray`` = (getArray getAttrValues xml "string_coll" getInnerText);
                    ``AttrStringSeq`` = (getSeq getAttrValues xml "string_coll" getInnerText);
                    ``MaybeAttrStringList`` = (getMaybeList getAttrValues xml "string_opt_coll" getInnerText);
                    ``MaybeAttrStringArray`` = (getMaybeArray getAttrValues xml "string_opt_coll" getInnerText);
                    ``MaybeAttrStringSeq`` = (getMaybeSeq getAttrValues xml "string_opt_coll" getInnerText);
                    ``SimpleAttrField`` = (exactlyOne "attributes" getAttrValues xml "int" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeAttrField`` = (maybeOne getAttrValues xml "int_opt" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``AttrFieldList`` = (getList getAttrValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``AttrFieldArray`` = (getArray getAttrValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``AttrFieldSeq`` = (getSeq getAttrValues xml "int_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeAttrFieldList`` = (getMaybeList getAttrValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeAttrFieldArray`` = (getMaybeArray getAttrValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``MaybeAttrFieldSeq`` = (getMaybeSeq getAttrValues xml "int_opt_coll" (parserForStrings "System.Int32" System.Int32.TryParse));
                    ``SimpleNestedField`` = (exactlyOne "tags" getTagValues xml "Node" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeNestedField`` = (maybeOne getTagValues xml "Node_Opt" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.NodeOpt.FromXmlNode);
                    ``NestedFieldList`` = (getList getTagValues xml "Node_Coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.NodeColl.FromXmlNode);
                    ``NestedFieldArray`` = (getArray getTagValues xml "Node_Coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.NodeColl.FromXmlNode);
                    ``NestedFieldSeq`` = (getSeq getTagValues xml "Node_Coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.NodeColl.FromXmlNode);
                    ``MaybeNestedFieldList`` = (getMaybeList getTagValues xml "Node_Opt_Coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.NodeOptColl.FromXmlNode);
                    ``MaybeNestedFieldArray`` = (getMaybeArray getTagValues xml "Node_Opt_Coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.NodeOptColl.FromXmlNode);
                    ``MaybeNestedFieldSeq`` = (getMaybeSeq getTagValues xml "Node_Opt_Coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.NodeOptColl.FromXmlNode);
                    ``SimpleMultiAttrField`` = (exactlyOne "tags" getTagValues xml "other_node" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeMultiAttrField`` = (maybeOne getTagValues xml "other_node_opt" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MultiAttrFieldList`` = (getList getTagValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MultiAttrFieldArray`` = (getArray getTagValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MultiAttrFieldSeq`` = (getSeq getTagValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeMultiAttrFieldList`` = (getMaybeList getTagValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeMultiAttrFieldArray`` = (getMaybeArray getTagValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeMultiAttrFieldSeq`` = (getMaybeSeq getTagValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``SimpleXPathNestedField`` = (exactlyOne "XPath" getXPathValues xml "xpath/path" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``MaybeXPathNestedField`` = (maybeOne getXPathValues xml "xpath/path_opt" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.PathOpt.FromXmlNode);
                    ``XPathNestedFieldList`` = (getList getXPathValues xml "xpath/path_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.PathColl.FromXmlNode);
                    ``XPathNestedFieldArray`` = (getArray getXPathValues xml "xpath/path_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.PathColl.FromXmlNode);
                    ``XPathNestedFieldSeq`` = (getSeq getXPathValues xml "xpath/path_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.PathColl.FromXmlNode);
                    ``MaybeXPathNestedFieldList`` = (getMaybeList getXPathValues xml "xpath/path_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.PathOptColl.FromXmlNode);
                    ``MaybeXPathNestedFieldArray`` = (getMaybeArray getXPathValues xml "xpath/path_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.PathOptColl.FromXmlNode);
                    ``MaybeXPathNestedFieldSeq`` = (getMaybeSeq getXPathValues xml "xpath/path_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.PathOptColl.FromXmlNode);
                    ``SimpleNestedXPathField`` = (exactlyOne "XPath" getXPathValues xml "other_node" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeNestedXPathField`` = (maybeOne getXPathValues xml "other_node_opt" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``NestedXPathFieldList`` = (getList getXPathValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``NestedXPathFieldArray`` = (getArray getXPathValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``NestedXPathFieldSeq`` = (getSeq getXPathValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeNestedXPathFieldList`` = (getMaybeList getXPathValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeNestedXPathFieldArray`` = (getMaybeArray getXPathValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``MaybeNestedXPathFieldSeq`` = (getMaybeSeq getXPathValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Node.FromXmlNode);
                    ``SimpleXPathNestedXPathField`` = (exactlyOne "XPath" getXPathValues xml "other_node" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``MaybeXPathNestedXPathField`` = (maybeOne getXPathValues xml "other_node_opt" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``XPathNestedXPathFieldList`` = (getList getXPathValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``XPathNestedXPathFieldArray`` = (getArray getXPathValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``XPathNestedXPathFieldSeq`` = (getSeq getXPathValues xml "other_node_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``MaybeXPathNestedXPathFieldList`` = (getMaybeList getXPathValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``MaybeXPathNestedXPathFieldArray`` = (getMaybeArray getXPathValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                    ``MaybeXPathNestedXPathFieldSeq`` = (getMaybeSeq getXPathValues xml "other_node_opt_coll" Amazingant.FSharp.TypeExpansion.Templates.FromXml.Tests.Path.FromXmlNode);
                }

            static member FromXmlDoc doc = thingFromDocElement doc "Test" TestFields.FromXmlNode
            static member FromXmlDoc xml = thingFromStringElement xml "Test" TestFields.FromXmlNode
